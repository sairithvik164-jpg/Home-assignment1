# -*- coding: utf-8 -*-
"""Gradient Descent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eX56uw2rYFkaXpHzvuqnl8kp9PRs0JVj
"""

import numpy as np
import matplotlib.pyplot as plt
import os

def generate_data(m=200, seed=42):
    rng = np.random.default_rng(seed)
    X_scalar = rng.uniform(0, 5, size=m)
    noise = rng.normal(0, 1.0, size=m)
    y = 3 + 4 * X_scalar + noise
    X = np.column_stack([np.ones(m), X_scalar])
    return X_scalar, X, y

def closed_form(X, y):
    theta = np.linalg.inv(X.T @ X) @ X.T @ y
    return theta  # [b,w]

def gradient_descent(X, y, eta=0.05, iters=1000):
    m = X.shape[0]
    theta = np.zeros(2)
    loss_history = []
    for _ in range(iters):
        preds = X @ theta
        grad = (2 / m) * (X.T @ (preds - y))
        theta -= eta * grad
        loss_history.append(np.mean((X @ theta - y) ** 2))
    return theta, np.array(loss_history)

def main():
    X_scalar, X, y = generate_data()
    b_cf, w_cf = closed_form(X, y)
    (b_gd, w_gd), loss = gradient_descent(X, y)
    x_plot = np.linspace(0, 5, 200)
    y_cf = b_cf + w_cf * x_plot
    y_gd = b_gd + w_gd * x_plot

    plt.figure(figsize=(7,5))
    plt.scatter(X_scalar, y, s=12, alpha=0.7, label="Raw data")
    plt.plot(x_plot, y_cf, label=f"Closed-form fit (b={b_cf:.3f}, w={w_cf:.3f})")
    plt.plot(x_plot, y_gd, linestyle="--", label=f"GD fit (b={b_gd:.3f}, w={w_gd:.3f})")
    plt.xlabel("x"); plt.ylabel("y"); plt.title("Linear Regression: Closed-form vs GD")
    plt.legend(); plt.tight_layout()

    # Instead of saving to a specific directory, just display the plot
    plt.show()
    # Or save to the current directory
    # plt.savefig("fitted_lines.png", dpi=150)

    plt.figure(figsize=(7,5))
    plt.plot(np.arange(1, len(loss)+1), loss)
    plt.xlabel("Iteration"); plt.ylabel("MSE Loss"); plt.title("GD Loss vs Iterations")
    plt.tight_layout()

    # Display the second plot too
    plt.show()
    # Or save to the current directory
    # plt.savefig("loss_curve.png", dpi=150)

    print(f"Closed-form: b={b_cf:.6f}, w={w_cf:.6f}")
    print(f"GD (eta=0.05, iters=1000): b={b_gd:.6f}, w={w_gd:.6f}")
    print(f"|Δb|={abs(b_cf-b_gd):.3e}, |Δw|={abs(w_cf-w_gd):.3e}")

if __name__ == "__main__":
    main()